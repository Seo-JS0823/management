<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- com.emp.employ.employee.EmployeeDTO -->
<mapper namespace="com.emp.manager.employee.MngEmployeeMapper">
	
	<!-- 직원 등록 : employeeInsert -->
	<insert id="employeeInsert">
		INSERT INTO employees
			(employee_id,
			 password,
			 department_id,
			 worktype_id,
			 position_id,
			 name,
			 gender,
			 birthdate,
			 <if test="phone_num != null">
			 	phone_num ,
			 </if>
			 <if test="email != null">
			 	email ,
			 </if>
			 address,
			 employment_date)
		VALUES
			(#{employee_id},
			#{password},
			#{department_id},
			#{worktype_id},
			#{position_id},
			#{name},
			#{gender},
			#{birthdate},
			<if test="phone_num != null">
				#{phone_num} ,
			</if>
			<if test="email != null">
				#{email} ,
			</if>
			(SELECT province || ' ' || search AS address FROM address WHERE address_id = #{address_id}),
			#{employment_date}
			)
	</insert>
	
	<!-- 직원 DELETE -->
	<delete id="employeeDelete">
		DELETE FROM
			employees
		WHERE
			employee_id = #{employee_id}
	</delete>
	
	<!-- 등록된 직원인지 검증 -->
	<select id="employeeEquals" resultType="int">
		SELECT
			COUNT(*) AS CNT
		FROM
			EMPLOYEES
		WHERE
			name = #{name} AND
			employment_date = #{employment_date} AND
			phone_num = #{phone_num}
	</select>
	
	<!-- 부서 담당자로 지정하기 전 담당자가 존재하는지 확인 -->
	<select id="managerContains" resultType="int">
		SELECT
			count(manager_name)
		FROM
			departments
		WHERE
			department_id = #{department_id}
	</select>
	
	<!-- 부서 담당자로 지정 -->
	<update id="managerUpdate">
		UPDATE
			departments
		SET
			manager_id = #{employee_id},
			manager_name = #{name}
		WHERE
			department_id = #{department_id}
			
	</update>
	
	<!-- 인사담당자 확인 SELECT -->
	<select id="hrPart" resultType="int">
		SELECT
    		COUNT(*) AS cnt
		FROM
    		departments D, employees E
		WHERE
    		E.department_id = D.department_id AND
		    E.employee_id = #{employee_id} AND
    		D.manager_id = #{employee_id} AND
		    D.department_id = '9010' AND
		    E.emp_flag != 0
	</select>
	
	<!-- 직원 목록 검색 : 검색어 부서명 or 직원명 -->
	<select id="searchEmp" resultType="com.emp.employ.employee.EmployeeDTO">
		SELECT
			E.name,
			P.position_name,
			E.employee_id,
			W.worktype,
			TO_CHAR(E.employment_date, 'YYYY-MM-DD') AS employment_date,
			D.department_name,
			D.manager_name,
			TO_CHAR(E.birthdate, 'YYYY-MM-DD') AS birthdate,
			E.address,
			E.emp_flag,
			TO_CHAR(E.exit_date, 'YYYY-MM-DD') AS exit_date
		FROM
			employees E, departments D, positions P, worktypes W
		WHERE
			E.department_id = D.department_id AND
			E.position_id = P.position_id AND
			E.worktype_id = W.worktype_id AND
			(E.name LIKE '%${search}%'            OR 
			 D.department_name LIKE '%${search}%' OR 
			 P.position_name LIKE '%${search}%'   OR
			 W.worktype LIKE '%${search}%')
			 <if test="search != '퇴사'">
			 	AND E.name NOT LIKE '%퇴사%'
			 </if>
	</select>
	
	<!-- 당일 출근 인원 카운트 -->
	<select id="nowWorkEmpCount" resultType="int">
		SELECT
		    COUNT(*) AS CNT
		FROM
		    attendance_record AR, employees E 
		WHERE
			AR.employee_id = E.employee_id AND
		    TO_CHAR(currentdate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
		    atte_start IS NOT NULL AND
		    E.emp_flag != 0
		    
	</select>
	
	<!-- 당일 부서별 출근 인원 카운트 -->
	<select id="nowPartEmpCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			attendance_record AR, employees E, departments D
		WHERE
			E.department_id = D.department_id AND
			E.employee_id = AR.employee_id AND
			TO_CHAR(AR.currentdate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
			AR.atte_start IS NOT NULL AND
			D.department_id = #{department_id} AND
			E.emp_flag != 0
	</select>
	
	<!-- 당일 부서별 출근 정보 -->
	<select id="partEmpList" resultType="com.emp.employ.atted.AttedDTO">
		SELECT
			E.name,
			TO_CHAR(AR.atte_start, 'HH24:MI') AS atte_start,
			TO_CHAR(AR.currentdate, 'YYYY-MM-DD') AS currentdate
		FROM
			attendance_record AR, employees E, departments D
		WHERE
			E.department_id = D.department_id AND
			E.employee_id = AR.employee_id AND
			TO_CHAR(AR.currentdate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
			AR.atte_start IS NOT NULL AND
			D.department_id = #{department_id} AND
			E.emp_flag != 0
	</select>	
	<!-- 전체 직원 수 카운트 -->
	<select id="allEmpCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			employees
		WHERE
			emp_flag != 0
	</select>
	
	<!-- 자기 부서 직원 수 카운트 -->
	<select id="departAllEmpCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			employees
		WHERE
			department_id = #{department_id} AND
			emp_flag != 0
	</select>
	
	<!-- 당일 기준 휴가자 조회 -->
	<select id="nowLeaveEmp" resultType="int">
		SELECT
		    count(*)
		FROM
		    employees E, departments D, leave_history LH
		WHERE
		    E.department_id = D.department_id AND
		    E.employee_id = LH.employee_id AND
		    SYSDATE BETWEEN LH.leave_start_date AND LH.leave_end_date AND
		    D.department_id = #{department_id} AND
		    LH.status = 1 AND
		    E.emp_flag != 0
	</select>
	
	<!-- 모든 휴가자 기록 조회 -->
	<select id="allLeaveEmp" resultType="com.emp.employ.employee.EmployeeDTO">
		SELECT
		    E.name,
		    E.gender,
		    D.department_name,
		    TO_CHAR(LH.leave_start_date, 'YYYY-MM-DD') AS leave_start_date,
		    TO_CHAR(LH.leave_end_date, 'YYYY-MM-DD') AS leave_end_date
		FROM
		    employees E, departments D, leave_history LH
		WHERE
		    E.department_id = D.department_id AND
		    E.employee_id = LH.employee_id AND
		    LH.status = 1 AND
		    E.emp_flag != 0
	</select>
	
	<!-- 부서별 직원의 휴가 승인 대기건 조회 (관리자 기능) -->
	<select id="leaveAgreeCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			leave_history LH, employees E, departments D
		WHERE
			E.department_id = D.department_id AND
			E.employee_id = LH.employee_id AND
			D.department_id = #{department_id} AND
			LH.status = 0 AND
			E.emp_flag != 0
	</select>
	
	<!-- 월별 휴가자 내역 조회 -->
	<select id="monthLeaveEmp" resultType="com.emp.employ.employee.EmployeeDTO">
		SELECT
		    E.name,
		    E.gender,
		    D.department_name,
		    TO_CHAR(LH.leave_start_date, 'YYYY-MM-DD') AS leave_start_date,
		    TO_CHAR(LH.leave_end_date, 'YYYY-MM-DD') AS leave_end_date
		FROM
		    employees E, departments D, leave_history LH
		WHERE
		    E.department_id = D.department_id AND
		    E.employee_id = LH.employee_id AND
		    LH.status = 1 AND
		    ((TO_DATE(#{start}, 'YYYY-MM-DD') <![CDATA[<=]]> LH.leave_start_date AND
		    TO_DATE(#{end}, 'YYYY-MM-DD') <![CDATA[>=]]> LH.leave_end_date) OR
		    ((TO_DATE(#{start}, 'YYYY-MM-DD') <![CDATA[<=]]> LH.leave_end_date) AND
		    TO_DATE(#{end}, 'YYYY-MM-DD') <![CDATA[>=]]> LH.leave_end_date) OR
		    (TO_DATE(#{start}, 'YYYY-MM-DD') <![CDATA[<=]]> LH.leave_start_date AND
		    TO_DATE(#{end}, 'YYYY-MM-DD') <![CDATA[>=]]> LH.leave_start_date)) AND
		    E.emp_flag != 0
		ORDER BY leave_start_date ASC
	</select>
	
	<!-- 월별 휴가자 내역 조회 처음 로직 
		SELECT
		    E.name,
		    E.gender,
		    D.department_name,
		    TO_CHAR(LH.leave_start_date, 'YYYY-MM-DD') AS leave_start_date,
		    TO_CHAR(LH.leave_end_date, 'YYYY-MM-DD') AS leave_end_date
		FROM
		    employees E, departments D, leave_history LH
		WHERE
		    E.department_id = D.department_id AND
		    E.employee_id = LH.employee_id AND
		    LH.status = 1 AND
		    TO_DATE(#{start}, 'YYYY-MM-DD') <![CDATA[<=]]> LH.leave_start_date AND
		    TO_DATE(#{end}, 'YYYY-MM-DD') <![CDATA[>=]]> LH.leave_end_date AND
		    E.emp_flag != 0
		ORDER BY leave_start_date ASC
		
		휴가 기간이 8/29 ~ 9/4 같은 경우 9월 달력에 표시가 되지 않았음.
		9월 달력의 start가 9/1 이었기 때문에 SELECT가 되지 않았던 것.
		달력에서 보여주는 기간과 직원의 휴가 기간이 하나라도 겹치면 그 휴가기간 데이터를 가져와야 했음.
		위 처럼 (start가 휴가 종료 날짜보다 크고 end가 휴가 종료날짜보다 큰 쿼리 
	 -->
	
	<!-- 퇴사자로 등록 -->
	<update id="empExit">
		UPDATE
			employees
		SET
			emp_flag = 0,
			exit_date = sysdate,
			name = name || '(퇴사)'
		WHERE
			employee_id = #{employee_id}
	</update>
	
	<!-- 퇴사자 등록 메시지 띄우려고 SELECT -->
	<select id="getDelEmp" resultType="string">
		SELECT
			name
		FROM
			employees
		WHERE
			employee_id = #{employee_id}
	</select>
	
	<!-- 퇴사자 등록한 것 철회 -->
	<update id="empExitReset">
		UPDATE
			employees
		SET
			emp_flag = 1,
			exit_date = null,
			name = SUBSTR(name, 1, 3)
		WHERE
			employee_id = #{employee_id}
	</update>
	
	<!-- 연차 적립 상세보기 -->
	<select id="getAnnualDetail" resultType="com.emp.employ.leave.LeaveEmpDTO">
		SELECT
			E.name,
			D.department_name,
			NVL(D.manager_name, '미지정') AS manager_name,
			P.position_name,
			TO_CHAR(E.employment_date, 'YYYY-MM-DD') AS employment_date,
			TO_CHAR(A.leave_date, 'YYYY-MM-DD') AS leave_date,
			A.leave_count,
			A.content,
			A.leave_id
		FROM
			employees E, departments D, annualleave A, positions P
		WHERE
			E.department_id = D.department_id AND
			E.position_id = P.position_id AND
			E.employee_id = A.employee_id AND
			A.leave_id = #{leave_id} AND
			E.emp_flag != 0
	</select>
	
	<!-- 적립한 연차 수정하기 -->
	<update id="annaulUpdate">
		UPDATE
			annualleave
		SET
			leave_count = #{leave_count},
			content = #{content}
		WHERE
			leave_id = #{leave_id}
	</update>
	
	<!-- 적립한 연차 삭제하기 -->
	<delete id="annualDelete">
		DELETE FROM
			annualleave
		WHERE
			leave_id = #{leave_id}
	</delete>
	
	<!-- 부서별 직원 수 조회 -->
	<select id="getPartAttedList">
		SELECT
		    E.name,
		    TO_CHAR(AR.currentDate, 'YYYY-MM-DD') AS currentDate,
		    TO_CHAR(AR.atte_start, 'HH24:MI') AS atte_start,
		    TO_CHAR(AR.atte_end, 'HH24:MI') AS atte_end,
		    TO_CHAR(AR.work_time, 'HH24:MI') AS work_time,
		    CASE
		        WHEN AR.atte_flag = 0 THEN '정상출근'
		        WHEN AR.atte_flag = 1 THEN '정상퇴근'
		        WHEN AR.atte_flag = 2 THEN '지각'
		        WHEN AR.atte_flag = 3 THEN '조퇴'
		        WHEN AR.atte_flag = 4 THEN '결석'
		        WHEN AR.atte_flag = 5 THEN '승인대기'
		    END AS status
		FROM
		    attendance_record AR, employees E
		WHERE
		    AR.employee_id = E.employee_id AND
		    E.department_id = #{department_id} AND
		    #{start} <![CDATA[<=]]> TO_CHAR(AR.currentDate, 'YYYY-MM-DD') AND
		    #{end} <![CDATA[>=]]> TO_CHAR(AR.currentDate, 'YYYY-MM-DD')
		<if test="sort == 'ASC'">
		    ORDER BY currentDate ASC
		</if>
		<if test="sort == 'DESC'">
		    ORDER BY currentDate DESC
		</if>
	</select>
	
	<!-- 부서별 출/퇴근 페이징 조회 -->
	<select id="getPagingPartAttedList" resultType="com.emp.employ.atted.AttedDTO">
		SELECT
		    E.name,
		    TO_CHAR(AR.currentDate, 'YYYY-MM-DD') AS currentDate,
		    TO_CHAR(AR.atte_start, 'HH24:MI') AS atte_start,
		    TO_CHAR(AR.atte_end, 'HH24:MI') AS atte_end,
		    TO_CHAR(AR.work_time, 'HH24:MI') AS work_time,
		    CASE
		        WHEN AR.atte_flag = 0 THEN '정상출근'
		        WHEN AR.atte_flag = 1 THEN '정상퇴근'
		        WHEN AR.atte_flag = 2 THEN '지각'
		        WHEN AR.atte_flag = 3 THEN '조퇴'
		        WHEN AR.atte_flag = 4 THEN '결석'
		        WHEN AR.atte_flag = 5 THEN '승인대기'
		    END AS status
		FROM
		    attendance_record AR, employees E
		WHERE
		    AR.employee_id = E.employee_id AND
		    E.department_id = #{department_id} AND
		    #{start} <![CDATA[<=]]> TO_CHAR(AR.currentDate, 'YYYY-MM-DD') AND
		    #{end} <![CDATA[>=]]> TO_CHAR(AR.currentDate, 'YYYY-MM-DD')
		<if test="sort == 'ASC'">
		    ORDER BY currentDate ASC
		</if>
		<if test="sort == 'DESC'">
		    ORDER BY currentDate DESC
		</if>
		OFFSET #{offset} ROWS
		FETCH NEXT #{recordSize} ROWS ONLY
	</select>
	
	<!-- 자기 부서 직원 정보 mePartEmpList -->
	<select id="mePartEmpList" resultType="com.emp.employ.employee.EmployeeDTO">
		SELECT
			E.name,
			E.employee_id,
			TO_CHAR(E.employment_date, 'YYYY-MM-DD') AS employment_date,
			P.position_name
		FROM
			employees E, Positions P
		WHERE
			E.position_id = P.position_id AND
			E.department_id = #{department_id}
			
	</select>
	
	<!-- 부서 담당자 변경 지정 -->
	<update id="partEmpChg">
		UPDATE
			departments
		SET
			manager_id = #{employee_id},
			manager_name = 
			(SELECT
				name
			 FROM
			 	employees
			 WHERE
			 	employee_id = #{employee_id}
			 )
		WHERE
			department_id = #{department_id}
	</update>
	
	<!-- 부서 이동을 위한 부서별 직원 SELECT -->
	<select id="getPartEmpList" resultType="com.emp.employ.employee.EmployeeDTO">
		SELECT
			E.employee_id,
			E.name,
			TO_CHAR(E.employment_date, 'RR/MM/DD') AS employment_date,
			D.department_name,
			D.manager_name
		FROM
			employees E, departments D
		WHERE
			E.department_id = D.department_id AND
			E.department_id = #{department_id} AND
			D.manager_id != E.employee_id
	</select>
	
	<!-- 직원의 부서 이동 UPDATE -->
	<update id="empPartChange">
		UPDATE
			employees
		SET
			department_id = #{department_id}
		WHERE
			employee_id = #{employee_id}
	</update>
	
</mapper>








